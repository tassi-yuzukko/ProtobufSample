/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: repeated.proto */

#ifndef PROTOBUF_C_repeated_2eproto__INCLUDED
#define PROTOBUF_C_repeated_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Inner Inner;
typedef struct _CMessage CMessage;


/* --- enums --- */


/* --- messages --- */

struct  _Inner
{
  ProtobufCMessage base;
  int32_t a;
  int32_t b;
};
#define INNER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&inner__descriptor) \
    , 0, 0 }


struct  _CMessage
{
  ProtobufCMessage base;
  size_t n_c;
  Inner **c;
};
#define CMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmessage__descriptor) \
    , 0,NULL }


/* Inner methods */
void   inner__init
                     (Inner         *message);
size_t inner__get_packed_size
                     (const Inner   *message);
size_t inner__pack
                     (const Inner   *message,
                      uint8_t             *out);
size_t inner__pack_to_buffer
                     (const Inner   *message,
                      ProtobufCBuffer     *buffer);
Inner *
       inner__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   inner__free_unpacked
                     (Inner *message,
                      ProtobufCAllocator *allocator);
/* CMessage methods */
void   cmessage__init
                     (CMessage         *message);
size_t cmessage__get_packed_size
                     (const CMessage   *message);
size_t cmessage__pack
                     (const CMessage   *message,
                      uint8_t             *out);
size_t cmessage__pack_to_buffer
                     (const CMessage   *message,
                      ProtobufCBuffer     *buffer);
CMessage *
       cmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmessage__free_unpacked
                     (CMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Inner_Closure)
                 (const Inner *message,
                  void *closure_data);
typedef void (*CMessage_Closure)
                 (const CMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor inner__descriptor;
extern const ProtobufCMessageDescriptor cmessage__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_repeated_2eproto__INCLUDED */
